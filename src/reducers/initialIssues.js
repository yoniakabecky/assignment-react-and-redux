export const initialIssues = {
  issues: [
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3567",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3567/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3567/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3567/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3567",
      "id": 490588738,
      "node_id": "MDU6SXNzdWU0OTA1ODg3Mzg=",
      "number": 3567,
      "title": "Investigate dropping all external dependencies",
      "user": {
        "login": "markerikson",
        "id": 1128784,
        "node_id": "MDQ6VXNlcjExMjg3ODQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markerikson",
        "html_url": "https://github.com/markerikson",
        "followers_url": "https://api.github.com/users/markerikson/followers",
        "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
        "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
        "organizations_url": "https://api.github.com/users/markerikson/orgs",
        "repos_url": "https://api.github.com/users/markerikson/repos",
        "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markerikson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 12,
      "created_at": "2019-09-07T04:11:14Z",
      "updated_at": "2019-09-10T20:20:59Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "We currently have two external dependencies:  https://github.com/zertosh/loose-envify and https://github.com/benlesh/symbol-observable .\r\n\r\n`loose-envify` appears to be used in `package.json`, but only as some kind of polyfill / build plugin for Browserify:\r\n\r\nhttps://github.com/reduxjs/redux/blob/85024d431ca765c843561be6792edeb7890d5fce/package.json#L102-L106\r\n\r\n`symbol-observable` is used in `createStore` as a polyfill for `Symbol.observable`, to allow compatibility for treating the Redux store as an observable:\r\n\r\nhttps://github.com/reduxjs/redux/blob/85024d431ca765c843561be6792edeb7890d5fce/src/createStore.ts#L1\r\n\r\nhttps://github.com/reduxjs/redux/blob/85024d431ca765c843561be6792edeb7890d5fce/src/createStore.ts#L331-L333\r\n\r\n\r\nI would like to strongly consider dropping both of those dependencies if at all possible.\r\n\r\nI question whether we need to have any specific support for Browserify in here.  If there's a build step that needs to be done, let the end users take care of it.  No reason to have an installation dep just for that.\r\n\r\n`symbol-observable` boils down to [this 15-line file for the polyfill](https://github.com/benlesh/symbol-observable/blob/e56e765476fd96dcb430fd44d936bc543d4d97ba/es/ponyfill.js) plus another [15 lines for figuring out what the global object is](https://github.com/benlesh/symbol-observable/blob/e56e765476fd96dcb430fd44d936bc543d4d97ba/es/index.js).\r\n\r\n@davidkpiano suggests [rolling our own `symbol-observable` if really needed](https://twitter.com/DavidKPiano/status/1170185751901794304).\r\n\r\n\r\nFinally, we are currently talking about [adding `ts-toolbelt` as a dependency for its `compose` function](https://github.com/reduxjs/redux/pull/3563).  I would like us to seriously investigate whatever other alternatives are out there to adding a dep, even if it's one that ultimately compiles away.\r\n"
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3566",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3566/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3566/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3566/events",
      "html_url": "https://github.com/reduxjs/redux/pull/3566",
      "id": 490586511,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzE1MTYzMTMz",
      "number": 3566,
      "title": "Improve TypeScript types",
      "user": {
        "login": "jedmao",
        "id": 1058243,
        "node_id": "MDQ6VXNlcjEwNTgyNDM=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/1058243?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jedmao",
        "html_url": "https://github.com/jedmao",
        "followers_url": "https://api.github.com/users/jedmao/followers",
        "following_url": "https://api.github.com/users/jedmao/following{/other_user}",
        "gists_url": "https://api.github.com/users/jedmao/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jedmao/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jedmao/subscriptions",
        "organizations_url": "https://api.github.com/users/jedmao/orgs",
        "repos_url": "https://api.github.com/users/jedmao/repos",
        "events_url": "https://api.github.com/users/jedmao/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jedmao/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2019-09-07T03:41:08Z",
      "updated_at": "2019-09-10T20:10:36Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/reduxjs/redux/pulls/3566",
        "html_url": "https://github.com/reduxjs/redux/pull/3566",
        "diff_url": "https://github.com/reduxjs/redux/pull/3566.diff",
        "patch_url": "https://github.com/reduxjs/redux/pull/3566.patch"
      },
      "body": "The [TS enhancement stage got the green light 🚦](https://github.com/reduxjs/redux/pull/3536#issuecomment-529003240), so this is a PR towards that effort. Could be some more after this."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3565",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3565/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3565/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3565/events",
      "html_url": "https://github.com/reduxjs/redux/pull/3565",
      "id": 490573105,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzE1MTUzODUx",
      "number": 3565,
      "title": "Move the examples to a separate repo",
      "user": {
        "login": "timdorr",
        "id": 17882,
        "node_id": "MDQ6VXNlcjE3ODgy",
        "avatar_url": "https://avatars2.githubusercontent.com/u/17882?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/timdorr",
        "html_url": "https://github.com/timdorr",
        "followers_url": "https://api.github.com/users/timdorr/followers",
        "following_url": "https://api.github.com/users/timdorr/following{/other_user}",
        "gists_url": "https://api.github.com/users/timdorr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/timdorr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/timdorr/subscriptions",
        "organizations_url": "https://api.github.com/users/timdorr/orgs",
        "repos_url": "https://api.github.com/users/timdorr/repos",
        "events_url": "https://api.github.com/users/timdorr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/timdorr/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 9,
      "created_at": "2019-09-07T01:01:10Z",
      "updated_at": "2019-09-10T01:14:16Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "pull_request": {
        "url": "https://api.github.com/repos/reduxjs/redux/pulls/3565",
        "html_url": "https://github.com/reduxjs/redux/pull/3565",
        "diff_url": "https://github.com/reduxjs/redux/pull/3565.diff",
        "patch_url": "https://github.com/reduxjs/redux/pull/3565.patch"
      },
      "body": "I'd like to move the examples out of the repo. They add a _lot_ of time to the build process and generally don't change significantly. They also don't require the source copy of Redux, so it's not like they are a canary for changes we make on master. \r\n\r\nMoving them to their own home means it's more reasonable to accept new additions, which is something we've been hesitant to do for a long while (years!). \r\n\r\nI've set them up in a new repo: [reduxjs/examples](https://github.com/reduxjs/examples)\r\n\r\nIs this a terrible idea? Anything we should do besides updating the docs and creating a new README in the `examples` path (which is temporarily gone at the moment)."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3562",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3562/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3562/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3562/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3562",
      "id": 488741382,
      "node_id": "MDU6SXNzdWU0ODg3NDEzODI=",
      "number": 3562,
      "title": "Broken link in the docs, section 'Learning resources'",
      "user": {
        "login": "AlbertVilaCalvo",
        "id": 4823860,
        "node_id": "MDQ6VXNlcjQ4MjM4NjA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/4823860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AlbertVilaCalvo",
        "html_url": "https://github.com/AlbertVilaCalvo",
        "followers_url": "https://api.github.com/users/AlbertVilaCalvo/followers",
        "following_url": "https://api.github.com/users/AlbertVilaCalvo/following{/other_user}",
        "gists_url": "https://api.github.com/users/AlbertVilaCalvo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AlbertVilaCalvo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AlbertVilaCalvo/subscriptions",
        "organizations_url": "https://api.github.com/users/AlbertVilaCalvo/orgs",
        "repos_url": "https://api.github.com/users/AlbertVilaCalvo/repos",
        "events_url": "https://api.github.com/users/AlbertVilaCalvo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AlbertVilaCalvo/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-09-03T17:52:44Z",
      "updated_at": "2019-09-03T18:03:56Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "There's a broken link in this page of the docs: https://redux.js.org/introduction/learning-resources\r\n\r\nThe broken link is: https://www.pshrmn.com/tutorials/react/redux/\r\n\r\nI don't see any tutorial now in https://www.pshrmn.com (otherwise I'd open a pull request)\r\n"
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3550",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3550/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3550/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3550/events",
      "html_url": "https://github.com/reduxjs/redux/pull/3550",
      "id": 487718842,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzEyOTIxOTc1",
      "number": 3550,
      "title": "2520 collection item reducer",
      "user": {
        "login": "phapdinh",
        "id": 5825929,
        "node_id": "MDQ6VXNlcjU4MjU5Mjk=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/5825929?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/phapdinh",
        "html_url": "https://github.com/phapdinh",
        "followers_url": "https://api.github.com/users/phapdinh/followers",
        "following_url": "https://api.github.com/users/phapdinh/following{/other_user}",
        "gists_url": "https://api.github.com/users/phapdinh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/phapdinh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/phapdinh/subscriptions",
        "organizations_url": "https://api.github.com/users/phapdinh/orgs",
        "repos_url": "https://api.github.com/users/phapdinh/repos",
        "events_url": "https://api.github.com/users/phapdinh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/phapdinh/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-08-31T02:02:48Z",
      "updated_at": "2019-08-31T02:05:30Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/reduxjs/redux/pulls/3550",
        "html_url": "https://github.com/reduxjs/redux/pull/3550",
        "diff_url": "https://github.com/reduxjs/redux/pull/3550.diff",
        "patch_url": "https://github.com/reduxjs/redux/pull/3550.patch"
      },
      "body": "Hi @markerikson, I saw that this issue #2520 has been around for a while and I thought I would help update the docs to include this example. Please tell me what you think. I used the example you provided in the issue, but fixed some stuff like adding action.name instead of just name and a closing paren."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3525",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3525/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3525/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3525/events",
      "html_url": "https://github.com/reduxjs/redux/pull/3525",
      "id": 484877328,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MzEwNjQ5NzI1",
      "number": 3525,
      "title": "add strict action creator typing as an option",
      "user": {
        "login": "cellog",
        "id": 98250,
        "node_id": "MDQ6VXNlcjk4MjUw",
        "avatar_url": "https://avatars2.githubusercontent.com/u/98250?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cellog",
        "html_url": "https://github.com/cellog",
        "followers_url": "https://api.github.com/users/cellog/followers",
        "following_url": "https://api.github.com/users/cellog/following{/other_user}",
        "gists_url": "https://api.github.com/users/cellog/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cellog/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cellog/subscriptions",
        "organizations_url": "https://api.github.com/users/cellog/orgs",
        "repos_url": "https://api.github.com/users/cellog/repos",
        "events_url": "https://api.github.com/users/cellog/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cellog/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2019-08-25T00:54:40Z",
      "updated_at": "2019-09-08T13:25:00Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/reduxjs/redux/pulls/3525",
        "html_url": "https://github.com/reduxjs/redux/pull/3525",
        "diff_url": "https://github.com/reduxjs/redux/pull/3525.diff",
        "patch_url": "https://github.com/reduxjs/redux/pull/3525.patch"
      },
      "body": "This fixes #3455 \r\n\r\nBasically, it modifies `ActionCreator` to accept a new, optional second template parameter. This parameter is a tuple, whose types will define the required parameters for the action creator.\r\n\r\nNote that there is no support for optional parameters. Additionally, this will enforce on the calling side only, not the declaration side, so if the action creator does not define all of the required parameters, it will not complain. It will complain if any specified parameters's types don't match."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3488",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3488/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3488/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3488/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3488",
      "id": 475086662,
      "node_id": "MDU6SXNzdWU0NzUwODY2NjI=",
      "number": 3488,
      "title": "State doesn't update when replaceReducers is called with combineReducers and one of the reducers passed to it is removed. ",
      "user": {
        "login": "anubhavgupta",
        "id": 3617454,
        "node_id": "MDQ6VXNlcjM2MTc0NTQ=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/3617454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/anubhavgupta",
        "html_url": "https://github.com/anubhavgupta",
        "followers_url": "https://api.github.com/users/anubhavgupta/followers",
        "following_url": "https://api.github.com/users/anubhavgupta/following{/other_user}",
        "gists_url": "https://api.github.com/users/anubhavgupta/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/anubhavgupta/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/anubhavgupta/subscriptions",
        "organizations_url": "https://api.github.com/users/anubhavgupta/orgs",
        "repos_url": "https://api.github.com/users/anubhavgupta/repos",
        "events_url": "https://api.github.com/users/anubhavgupta/events{/privacy}",
        "received_events_url": "https://api.github.com/users/anubhavgupta/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2019-07-31T11:24:02Z",
      "updated_at": "2019-08-21T12:38:15Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "**Do you want to request a _feature_ or report a _bug_?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nThe `combineReducers` function does't detect if one of the reducers passed to it is removed(via replaceReducers) and thus returns an old state.\r\n  \r\n```js\r\n// Reducers\r\nconst foo = (state = { value: 'foo' } ) => state\r\nconst bar = (state = { value: 'bar' }) => state\r\n\r\nconst ACTION = { type: 'ACTION' };\r\n\r\nconst originalCompositeReducer = combineReducers({ foo, bar })\r\nconst store = createStore(originalCompositeReducer)\r\nstore.dispatch(ACTION)\r\n\r\n\r\nconst initialState = store.getState() // returns -> { \r\n //                                                   foo: { value: 'foo' }, \r\n //                                                   bar: { value: 'bar' } \r\n //                                                }\r\n\r\n// now remove `foo` reducer\r\nstore.replaceReducer(combineReducers({ bar }))\r\nconst nextState = store.getState() // returns -> { \r\n//                                                 foo: { value: 'foo' }, \r\n//                                                 bar: { value: 'bar' } \r\n//                                                }\r\n//                      should have returned -> { bar: { value: 'bar' } }\r\nexpect(nextState).not.toBe(initialState) // --> this fails\r\n```\r\n\r\nSteps to reproduce: \r\nOpen [JSFiddle Link](https://jsfiddle.net/f5er907y/2/):\r\n1) Click \"Dispatch action\" button\r\n-> 2 boxes gets rendered,  one of `foo` and other of `bar`. \r\n2) Click \"Replace Reducer: remove `bar` reducer\" button\r\n-> Again, 2 boxes gets rendered,  one of `foo` and other of `bar`. \r\n**Expected**: Only one box should render, i.e. box of `bar` only.\r\n\r\n**What is the expected behavior?**\r\nThe `combineReducers` function should detect if one or more reducers passed to it is removed(via replaceReducers) and thus should update the store with new state.\r\n\r\n**Which versions of Redux, and which browser and OS are affected by this issue? Did this work in previous versions of Redux?**\r\nRedux Version: V4.0.4\r\nOS: MAC\r\nWorked on previous versions: no."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3482",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3482/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3482/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3482/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3482",
      "id": 472180593,
      "node_id": "MDU6SXNzdWU0NzIxODA1OTM=",
      "number": 3482,
      "title": "TypeScript defintion of StoreEnhancer does not allow state extension with replaceReducer",
      "user": {
        "login": "mhelmer",
        "id": 2509951,
        "node_id": "MDQ6VXNlcjI1MDk5NTE=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/2509951?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mhelmer",
        "html_url": "https://github.com/mhelmer",
        "followers_url": "https://api.github.com/users/mhelmer/followers",
        "following_url": "https://api.github.com/users/mhelmer/following{/other_user}",
        "gists_url": "https://api.github.com/users/mhelmer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mhelmer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mhelmer/subscriptions",
        "organizations_url": "https://api.github.com/users/mhelmer/orgs",
        "repos_url": "https://api.github.com/users/mhelmer/repos",
        "events_url": "https://api.github.com/users/mhelmer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mhelmer/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 25,
      "created_at": "2019-07-24T09:37:52Z",
      "updated_at": "2019-08-30T20:31:52Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a _feature_ or report a _bug_?**\r\n\r\nThe `StoreEnhancer` TypeScript interface does not seem to have the appropriate type for the `replaceReducer` property of the enhanced store. I would consider it a bug in the type definition.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen implementing the `StoreEnhancer` interface with `ExtraState`, the type signature of `replaceReducer` on the \"enhanced\" store is coupled to the type of the wrapped reducer.\r\n\r\nGiven a `StoreEnhancer` of type\r\n\r\n```ts\r\nStoreEnhancer<Ext, ExtraState>\r\n```\r\n\r\nthe returned store is of type\r\n\r\n```ts\r\nStore<S & StateExt, A> & Ext\r\n```\r\n\r\nwith the `replaceReducer` property as such\r\n\r\n```ts\r\n(nextReducer: Reducer<S & ExtraState, A>) => void\r\n```\r\n\r\nReturning a store with a `replaceReducer` that accepts the original reducer gives the following type-error:\r\n\r\n```\r\nType '<S, A extends Action<any> = AnyAction>(reducer: Reducer<S, A>, preloadedState?: DeepPartial<S> | undefined) => { replaceReducer: (nextReducer: Reducer<S, A>) => void; dispatch: Dispatch<A>; getState(): S & ExtraState; subscribe(listener: () => void): Unsubscribe; [Symbol.observable](): Observable<...>; }' is not assignable to type 'StoreEnhancerStoreCreator<{}, ExtraState>'.\r\n      Type '{ replaceReducer: (nextReducer: Reducer<S, A>) => void; dispatch: Dispatch<A>; getState(): S & ExtraState; subscribe(listener: () => void): Unsubscribe; [Symbol.observable](): Observable<S & ExtraState>; }' is not assignable to type 'Store<S & ExtraState, A>'.\r\n        Types of property 'replaceReducer' are incompatible.\r\n          Type '(nextReducer: Reducer<S, A>) => void' is not assignable to type '(nextReducer: Reducer<S & ExtraState, A>) => void'.\r\n            Types of parameters 'nextReducer' and 'nextReducer' are incompatible.\r\n              Types of parameters 'state' and 'state' are incompatible.\r\n                Type 'S | undefined' is not assignable to type '(S & ExtraState) | undefined'.\r\n                  Type 'S' is not assignable to type '(S & ExtraState) | undefined'.\r\n                    Type 'S' is not assignable to type 'S & ExtraState'.\r\n                      Type 'S' is not assignable to type 'ExtraState'.\r\n\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar.**\r\n\r\nThe type check fails for the following code:\r\n\r\n```ts\r\nimport {\r\n  StoreEnhancer,\r\n  Action,\r\n  AnyAction,\r\n  Reducer,\r\n  createStore,\r\n  DeepPartial\r\n} from \"redux\";\r\n\r\ninterface State {\r\n  someField: \"string\";\r\n}\r\n\r\ninterface ExtraState {\r\n  extraField: \"extra\";\r\n}\r\n\r\nconst reducer: Reducer<State> = null as any;\r\n\r\nfunction stateExtensionExpectedToWork() {\r\n  interface ExtraState {\r\n    extraField: \"extra\";\r\n  }\r\n\r\n  const enhancer: StoreEnhancer<{}, ExtraState> = createStore => <\r\n    S,\r\n    A extends Action = AnyAction\r\n  >(\r\n    reducer: Reducer<S, A>,\r\n    preloadedState?: DeepPartial<S>\r\n  ) => {\r\n    const wrappedReducer: Reducer<S & ExtraState, A> = null as any;\r\n    const wrappedPreloadedState: S & ExtraState = null as any;\r\n    const store = createStore(wrappedReducer, wrappedPreloadedState);\r\n    return {\r\n      ...store,\r\n      replaceReducer: (nextReducer: Reducer<S, A>): void => {\r\n        const nextWrappedReducer: Reducer<S & ExtraState, A> = null as any;\r\n        store.replaceReducer(nextWrappedReducer);\r\n      }\r\n    };\r\n  };\r\n\r\n  const store = createStore(reducer, enhancer);\r\n  store.replaceReducer(reducer);\r\n}\r\n```\r\n\r\nSee `src/index.ts` in the linked codesandbox example that implements the same function that would be expected to type-check, followed by another function of how it actually has to be done.\r\n\r\nhttps://codesandbox.io/s/redux-store-enhancer-types-s6d3v\r\n\r\nThe example is based on the typescript test for the enhancer at [`test/typescript/enhancers.ts`](https://github.com/reduxjs/redux/blob/b6e1586d382b7e1f8f27776c3f422ef59efcd33a/test/typescript/enhancers.ts#L36) in this repo. The code doesn't execute (due to unsafe casts of null as any), but it is the type check that is of interest here.\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen a store is created with a store enhancer that wraps a reducer and adds state, I would expect that `replaceReducer` on the returned store can be called with the original `rootReducer`.\r\n\r\n```ts\r\nconst store = createStore(rootReducer, preloadedState, enhancer)\r\n// ...\r\nstore.replaceReducer(rootReducer)\r\n```\r\n\r\nIt would be the responsibility of the `enhancer` to appropriately replace the wrapped reducer. I.e return a store such as:\r\n\r\n```ts\r\n{\r\n  ...store,\r\n  replaceReducer: (nextReducer: Reducer<S, A>) => {\r\n    store.replaceReducer(wrapReducer(nextReducer))\r\n  },\r\n}\r\n\r\n```\r\n\r\n\r\n**Which versions of Redux, and which browser and OS are affected by this issue? Did this work in previous versions of Redux?**\r\n\r\nRedux version: 4.0.4,\r\nOS: Ubuntu 19.04\r\nBrowser: N/A\r\nDid this work in previous versions of Redux?: Not that I know of"
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3455",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3455/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3455/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3455/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3455",
      "id": 459018701,
      "node_id": "MDU6SXNzdWU0NTkwMTg3MDE=",
      "number": 3455,
      "title": "[bug: typescript] ActionCreator lose it's arguments type",
      "user": {
        "login": "dabuside",
        "id": 7280952,
        "node_id": "MDQ6VXNlcjcyODA5NTI=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/7280952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dabuside",
        "html_url": "https://github.com/dabuside",
        "followers_url": "https://api.github.com/users/dabuside/followers",
        "following_url": "https://api.github.com/users/dabuside/following{/other_user}",
        "gists_url": "https://api.github.com/users/dabuside/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dabuside/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dabuside/subscriptions",
        "organizations_url": "https://api.github.com/users/dabuside/orgs",
        "repos_url": "https://api.github.com/users/dabuside/repos",
        "events_url": "https://api.github.com/users/dabuside/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dabuside/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2019-06-21T05:42:22Z",
      "updated_at": "2019-09-08T13:34:35Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**What is the current behavior?**\r\n\r\nhttps://github.com/reduxjs/redux/blob/beb1fc29ca6ebe45226caa3a064476072cd9ed26/test/typescript/actionCreators.ts#L13-L18\r\n\r\nWe declare the `addTodo` function that accepts one string argument `text`,\r\nbut we could pass any argument to it.\r\n\r\n`const addTodoAction: AddTodoAction = addTodo(false, 0, null);`\r\n👆👆👆 //no ts error!\r\n\r\nThere may be a problem `(...args: any[])`\r\nhttps://github.com/reduxjs/redux/blob/c676a25525bd7e4f2bf407cf1a135f355a2c1d79/index.d.ts#L440-L442\r\n\r\n**What is the expected behavior?**\r\n\r\nRaise a type error\r\n"
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3377",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3377/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3377/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3377/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3377",
      "id": 420649624,
      "node_id": "MDU6SXNzdWU0MjA2NDk2MjQ=",
      "number": 3377,
      "title": "[examples] todos-flow combineReducers() throws Flow error of missing type annotations",
      "user": {
        "login": "synchronos-t",
        "id": 9976993,
        "node_id": "MDQ6VXNlcjk5NzY5OTM=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/9976993?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/synchronos-t",
        "html_url": "https://github.com/synchronos-t",
        "followers_url": "https://api.github.com/users/synchronos-t/followers",
        "following_url": "https://api.github.com/users/synchronos-t/following{/other_user}",
        "gists_url": "https://api.github.com/users/synchronos-t/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/synchronos-t/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/synchronos-t/subscriptions",
        "organizations_url": "https://api.github.com/users/synchronos-t/orgs",
        "repos_url": "https://api.github.com/users/synchronos-t/repos",
        "events_url": "https://api.github.com/users/synchronos-t/events{/privacy}",
        "received_events_url": "https://api.github.com/users/synchronos-t/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-03-13T18:17:39Z",
      "updated_at": "2019-07-01T04:31:45Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "There seems to be something missing in the type annotations of the _todos-flow_ example, as its [combineReducers()](https://github.com/reduxjs/redux/blob/104b134f98d4ae8f091f696148cec75010526301/examples/todos-flow/src/reducers/index.js#L8) function throws a Flow error:\r\n\r\n> Missing type annotation for `A`. `A` is a type parameter declared in  function type [1] and was implicitly instantiated at  call of `combineReducers` [2].\r\n\r\nWhere the [1] is the type declaration from flow-typed:\r\n`declare export function combineReducers<O: Object, A>(reducers: O): CombinedReducer<$ObjMap<O, <S>(r: Reducer<S, any>) => S>, A>;`\r\n\r\nand the [2] the call:\r\n`export default combineReducers({\r\n  todos,\r\n  visibilityFilter\r\n});`\r\n\r\nSo, I inferred that I should type annotate the combineReducers() something like:\r\n`export default combineReducers<CombinedReducers, State>`\r\n\r\nSo, the example should instead be something like this, amirite?\r\n```\r\nimport type { State } from '../types';\r\n\r\nconst reducers = {\r\n  todos,\r\n  visibilityFilter,\r\n};\r\n\r\nexport default combineReducers<typeof reducers, State>(reducers);\r\n```\r\n\r\nOr is there something missing in the flow-typed definitions?\r\n\r\nI tested using the example project and let the npm and flow-typed just install their things. (I also changed the .flowconfig not to refer to ../../flow-typed, but instead just flow-typed.)"
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3344",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3344/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3344/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3344/events",
      "html_url": "https://github.com/reduxjs/redux/pull/3344",
      "id": 404017458,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ4Mjk1MzY2",
      "number": 3344,
      "title": "3075 add historical context",
      "user": {
        "login": "monicatie",
        "id": 253554,
        "node_id": "MDQ6VXNlcjI1MzU1NA==",
        "avatar_url": "https://avatars2.githubusercontent.com/u/253554?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/monicatie",
        "html_url": "https://github.com/monicatie",
        "followers_url": "https://api.github.com/users/monicatie/followers",
        "following_url": "https://api.github.com/users/monicatie/following{/other_user}",
        "gists_url": "https://api.github.com/users/monicatie/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/monicatie/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/monicatie/subscriptions",
        "organizations_url": "https://api.github.com/users/monicatie/orgs",
        "repos_url": "https://api.github.com/users/monicatie/repos",
        "events_url": "https://api.github.com/users/monicatie/events{/privacy}",
        "received_events_url": "https://api.github.com/users/monicatie/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2019-01-28T21:35:20Z",
      "updated_at": "2019-01-28T22:04:30Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/reduxjs/redux/pulls/3344",
        "html_url": "https://github.com/reduxjs/redux/pull/3344",
        "diff_url": "https://github.com/reduxjs/redux/pull/3344.diff",
        "patch_url": "https://github.com/reduxjs/redux/pull/3344.patch"
      },
      "body": "Hi! I took a stab at issue 3075 (https://github.com/reduxjs/redux/issues/3075) \r\n\r\nI read over Mark's links and docs and tried to condense as much of the information into a factual, easily digestible format and limited it to core context pieces. I definitely cut a lot of content in doing so, and can imagine adding some back for more info.\r\n\r\nI decided to limit the historical context to three things: Flux, influence of functional paradigms and a philosophy of keeping things simple. These were the main influences I found to have the most historical impact on the React/JS community over the past few years and in my own year long investigation into comparing/contrasting state management libraries in my professional work.\r\n\r\nI hope this at least gives a starting point to adding Historical Context for those looking to understand the background. Looking forward to discussing it with you all and making updates."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3321",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3321/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3321/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3321/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3321",
      "id": 394902550,
      "node_id": "MDU6SXNzdWUzOTQ5MDI1NTA=",
      "number": 3321,
      "title": "Discussion: consider expanding the Redux core",
      "user": {
        "login": "markerikson",
        "id": 1128784,
        "node_id": "MDQ6VXNlcjExMjg3ODQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markerikson",
        "html_url": "https://github.com/markerikson",
        "followers_url": "https://api.github.com/users/markerikson/followers",
        "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
        "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
        "organizations_url": "https://api.github.com/users/markerikson/orgs",
        "repos_url": "https://api.github.com/users/markerikson/repos",
        "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markerikson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 22,
      "created_at": "2018-12-30T21:25:49Z",
      "updated_at": "2019-02-26T11:07:05Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "## Note: This idea is almost entirely hypothetical, but it's been suggested a few times and is worth discussing.\r\n\r\nThe Redux core has been tiny since the beginning.  The original intent was always to keep the core small, make the API extensible, grow an ecosystem, and maybe \"bless\" some plugins along the way.  (References: **[The Tao of Redux, Part 1: Implementation and Intent](https://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/)**, **[You Might Need Redux (And Its Ecosystem)](https://blog.isquaredsoftware.com/2017/09/presentation-might-need-redux-ecosystem/)**)\r\n\r\nThis has worked great, in the sense that there is indeed [a huge ecosystem of addons](https://github.com/markerikson/redux-ecosystem-links) for just about any use case you can think of.  As part of that, the core library package has stayed basically unchanged for the last three years, and the docs have been very unopinionated (usually just listing some available options, like folder structure approaches).\r\n\r\nWe've recently introduced our new [`redux-starter-kit` package](https://redux-starter-kit.js.org/).  It adds some deliberately opinionated utilities around the Redux core, like [simplified store setup with the most commonly used options and some sanity checks](https://redux-starter-kit.js.org/api/configureStore), [simplified reducers with lookup-table definitions and Immer-powered \"mutative\" immutable updates](https://redux-starter-kit.js.org/api/createReducer), and even [creating entire \"slices\" of state at once](https://redux-starter-kit.js.org/api/createSlice).  While it hasn't gotten widespread usage yet, the reactions I've seen have been almost universally positive.  \r\n\r\nAs part of that, some people have suggested that we might want to consider actually renaming the current `redux` package to something like `@reduxjs/core`, and rename `redux-starter-kit` to be the new `redux` package.  I [recently ran a Twitter poll asking about this](https://twitter.com/acemarke/status/1075882836605980673), and the results were a bit surprising.  54% of actual respondents were in favor of this idea.\r\n\r\nI'll be honest and say that this is not very likely to happen.  But, it's worth opening up a discussion about what actual additional functionality is worth adding to the core, if any.\r\n\r\nSo... thoughts?  Ideas?  Suggestions?\r\n\r\nAs a reference, I'll link [issue #2295: Request for Discussion: Redux \"boilerplate\", learning curve, abstraction, and opinionatedness](https://github.com/reduxjs/redux/issues/2295).  That overly-long thread does give some indications as to the kinds of things people might find useful.\r\n\r\nTagging @modernserf and @matthew-gerstman , since I know they have opinions on this, and of course @timdorr , @gaearon , and @acdlite ."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3313",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3313/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3313/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3313/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3313",
      "id": 394038541,
      "node_id": "MDU6SXNzdWUzOTQwMzg1NDE=",
      "number": 3313,
      "title": "Discussion: revamped docs content, structure, and teaching flow",
      "user": {
        "login": "markerikson",
        "id": 1128784,
        "node_id": "MDQ6VXNlcjExMjg3ODQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markerikson",
        "html_url": "https://github.com/markerikson",
        "followers_url": "https://api.github.com/users/markerikson/followers",
        "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
        "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
        "organizations_url": "https://api.github.com/users/markerikson/orgs",
        "repos_url": "https://api.github.com/users/markerikson/repos",
        "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markerikson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 17,
      "created_at": "2018-12-25T17:11:46Z",
      "updated_at": "2019-08-24T22:34:17Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Per discussion in #2590 , we'd like to rethink the Redux docs content and structure pretty much from the ground up.  Now that we've got the new docs site up and running, it's time to start brainstorming what that content should look like.  (There's already a bunch of discussion and notes in #2590, but I wanted to open a new issue specifically to brainstorm ideas.)\r\n\r\nThere's a few questions that we should try to answer:\r\n\r\n- What specific topics should we try to cover in the docs?\r\n- What should the new user reading flow look like?\r\n- How should we organize the content?\r\n- How do we approach teaching Redux?\r\n- How do we integrate teaching and encouraging the use of `redux-starter-kit` into the new docs?\r\n- What are the weaknesses and deficiencies in the current docs that we are trying to resolve?\r\n- How do we handle teaching prerequisite concepts like immutability, JS array methods, and event emitters, in relation to the actual Redux concepts and usage?  How do we differentiate between teaching \"plain\" Redux usage, and usage with a UI layer like React-Redux?\r\n\r\nIn general, there's _lots_ of good Redux tutorials, articles, and resources out there.  I would like us to beg, borrow, and steal the best ideas and examples out there for use with the docs (with permission if appropriate, of course :)  )\r\n\r\nAnyone is welcome to contribute to this discussion, but I'd particularly like to get involvement from other people who have experience writing material that teaches Redux or working on docs.  On that note, tagging:\r\n\r\n@dceddia\r\n@rwieruch \r\n@joshwcomeau \r\n@valentinogagliardi\r\n@alexkrolick\r\n@matthew-gerstman\r\n@tylermcginnis\r\n@gaearon \r\n@timdorr "
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3294",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3294/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3294/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3294/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3294",
      "id": 390030883,
      "node_id": "MDU6SXNzdWUzOTAwMzA4ODM=",
      "number": 3294,
      "title": "Add a \"Testimonials\" docs page",
      "user": {
        "login": "markerikson",
        "id": 1128784,
        "node_id": "MDQ6VXNlcjExMjg3ODQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markerikson",
        "html_url": "https://github.com/markerikson",
        "followers_url": "https://api.github.com/users/markerikson/followers",
        "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
        "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
        "organizations_url": "https://api.github.com/users/markerikson/orgs",
        "repos_url": "https://api.github.com/users/markerikson/repos",
        "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markerikson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 12,
      "created_at": "2018-12-12T01:50:48Z",
      "updated_at": "2019-04-30T19:26:48Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I'd love to have a page with actual testimonials from real end users who are using Redux to do nifty stuff, especially things that really show the benefits of Redux (middleware that manipulate actions, apps that persist or sync state, scaled-up codebases, etc).\r\n\r\nIf you're using Redux, I'd love to have you leave a comment here with a quote that talks about:\r\n\r\n- Who you are and where you're using Redux\r\n- How it's helping your development\r\n- _Why_ you're using Redux\r\n- Some of the scale of your application in terms of SLOC, reducers, number of users, etc\r\n\r\nQuotes from developers with any size of app are welcome :)"
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3173",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3173/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3173/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3173/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3173",
      "id": 369737879,
      "node_id": "MDU6SXNzdWUzNjk3Mzc4Nzk=",
      "number": 3173,
      "title": "\"Refactoring Reducers\" recipe shouldn't promote over-abstraction",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 218057855,
          "node_id": "MDU6TGFiZWwyMTgwNTc4NTU=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/bug",
          "name": "bug",
          "color": "fc2929",
          "default": true
        },
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2018-10-12T23:07:30Z",
      "updated_at": "2018-12-03T17:25:57Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "From https://redux.js.org/recipes/structuringreducers/refactoringreducersexample:\r\n\r\n>Now it's *very* clear what's happening in each case. We can also start to see some patterns emerging.\r\n\r\nI'd argue the original code is clearest of all examples, and every next iteration makes it more complex due to giving names to every intermediate concept that doesn't really deserve a name. That's how people come to thinking Redux is complex.\r\n\r\nI understand where the writer is coming from. But I don't think code like this should look like a recommendation. Maybe a less extreme version of this could be helpful but I think this form is giving the wrong impression."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3168",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3168/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3168/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3168/events",
      "html_url": "https://github.com/reduxjs/redux/pull/3168",
      "id": 368759662,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MjIxODYyNTkz",
      "number": 3168,
      "title": "Use @babel/runtime helpers instead of bundled ones",
      "user": {
        "login": "Andarist",
        "id": 9800850,
        "node_id": "MDQ6VXNlcjk4MDA4NTA=",
        "avatar_url": "https://avatars2.githubusercontent.com/u/9800850?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Andarist",
        "html_url": "https://github.com/Andarist",
        "followers_url": "https://api.github.com/users/Andarist/followers",
        "following_url": "https://api.github.com/users/Andarist/following{/other_user}",
        "gists_url": "https://api.github.com/users/Andarist/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Andarist/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Andarist/subscriptions",
        "organizations_url": "https://api.github.com/users/Andarist/orgs",
        "repos_url": "https://api.github.com/users/Andarist/repos",
        "events_url": "https://api.github.com/users/Andarist/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Andarist/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 3,
      "created_at": "2018-10-10T16:55:27Z",
      "updated_at": "2019-01-27T19:22:36Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/reduxjs/redux/pulls/3168",
        "html_url": "https://github.com/reduxjs/redux/pull/3168",
        "diff_url": "https://github.com/reduxjs/redux/pull/3168.diff",
        "patch_url": "https://github.com/reduxjs/redux/pull/3168.patch"
      },
      "body": "Main focus of this PR is to use @babel/runtime helpers instead of including their copy in distributed sources.\r\n\r\nAdditionally I've refactored rollup.config.js to more readable form (in my opinion). I think it's easier to see how different bundles are different now, when their definitions are way shorter at the bottom of the file. If you don't like it I may revert the change.\r\n\r\n**Motivation**\r\nShipping less code - by using @babel/runtime helpers we are able to deduplicate their code across all dependencies using them.\r\n\r\nQuick test on the size of `es/redux.js`. It's not perfect because I have not minified away dev-only warnings, but I didn't do that for both cases (pre-PR & post-PR) so I think that results are still comparable.\r\n\r\nUsing\r\n```sh\r\nnpx terser -cm --toplevel es/redux.js | gzip -c | wc -c\r\n```\r\nI got 2958 pre-PR & 2862 post-PR. This is nearly 100b reduction & this includes a rather lengthy reference to the imported module (`@babel/runtime/helpers/esm/objectSpread`) which costs approximately 25b, so in fact this change saves 100b+ (assuming ESM code can be inlined in user bundles thanks to module concatenation aka scope hoisting). 💰 "
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3109",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3109/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3109/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3109/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3109",
      "id": 353480262,
      "node_id": "MDU6SXNzdWUzNTM0ODAyNjI=",
      "number": 3109,
      "title": "Async Actions documentation issue",
      "user": {
        "login": "maddn",
        "id": 1906566,
        "node_id": "MDQ6VXNlcjE5MDY1NjY=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1906566?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maddn",
        "html_url": "https://github.com/maddn",
        "followers_url": "https://api.github.com/users/maddn/followers",
        "following_url": "https://api.github.com/users/maddn/following{/other_user}",
        "gists_url": "https://api.github.com/users/maddn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/maddn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/maddn/subscriptions",
        "organizations_url": "https://api.github.com/users/maddn/orgs",
        "repos_url": "https://api.github.com/users/maddn/repos",
        "events_url": "https://api.github.com/users/maddn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/maddn/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 4,
      "created_at": "2018-08-23T17:29:00Z",
      "updated_at": "2018-08-23T21:04:33Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**  \r\n\r\nIssue with the Async Actions documentation\r\n\r\n**What is the current behavior?**\r\n\r\nApologies if I have misunderstood the documentation, but I see a problem with the use of fetchPostsIfNeeded here:\r\n\r\n```\r\nstore\r\n  .dispatch(fetchPostsIfNeeded('reactjs'))\r\n  .then(() => console.log(store.getState()))\r\n\r\n```\r\nfetchPostsIfNeeded resolves straight away if posts.isFetching, so the state will be logged to the console before it has the posts.\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect the posts to always be populated in the state after this resolves.\r\n\r\nSo in this scenario, where a second fetchPostsIfNeeded is dispatched while the first is still fetching,\r\nshouldn't it wait on the fetchPosts promise from the original dispatch so both resolve when the posts have been fetched?\r\n\r\n"
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3097",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3097/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3097/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3097/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3097",
      "id": 350235028,
      "node_id": "MDU6SXNzdWUzNTAyMzUwMjg=",
      "number": 3097,
      "title": "Changes to \"compose\" to allow composition of reducers",
      "user": {
        "login": "stylemistake",
        "id": 1516236,
        "node_id": "MDQ6VXNlcjE1MTYyMzY=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/1516236?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stylemistake",
        "html_url": "https://github.com/stylemistake",
        "followers_url": "https://api.github.com/users/stylemistake/followers",
        "following_url": "https://api.github.com/users/stylemistake/following{/other_user}",
        "gists_url": "https://api.github.com/users/stylemistake/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/stylemistake/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stylemistake/subscriptions",
        "organizations_url": "https://api.github.com/users/stylemistake/orgs",
        "repos_url": "https://api.github.com/users/stylemistake/repos",
        "events_url": "https://api.github.com/users/stylemistake/events{/privacy}",
        "received_events_url": "https://api.github.com/users/stylemistake/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-08-14T00:01:07Z",
      "updated_at": "2019-01-26T15:33:45Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "I'm not sure if this is a common pattern, but I really like the idea of composing reducers (in a flat, linear fashion) in addition to combining them (in a nested, domain fashion), and I use this pattern myself a lot.\r\n\r\nThere is a myriad of non-generic implementations, such as [reduce-reducers](https://github.com/redux-utilities/reduce-reducers), [reducer-chain](https://github.com/bydooweedoo/reducer-chain), and [many others](https://github.com/markerikson/redux-ecosystem-links/blob/master/reducers.md).\r\n\r\nHere's an example of how this might look:\r\n\r\n```js\r\nconst reducer = compose(\r\n  combineReducers({\r\n    router: routerReducer,\r\n    rulebook: rulebookReducer,\r\n  }),\r\n  characterReducer,\r\n  gameStateReducer,\r\n  relayReducer,\r\n  persistenceReducer,\r\n  initialStateReducer\r\n);\r\n```\r\n\r\nReducers can be generalized as value transforms that have a **context** in form of additional arguments. So, this signature:\r\n\r\n```js\r\n(input, ...rest) => output\r\n```\r\n\r\nis a generalized version of this signature:\r\n\r\n```js\r\n(prevState, action) => nextState\r\n```\r\n\r\n**Current Redux implementation:**\r\n\r\n```js\r\nfunction compose(...funcs) {\r\n  if (funcs.length === 0) {\r\n    return arg => arg;\r\n  }\r\n  if (funcs.length === 1) {\r\n    return funcs[0];\r\n  }\r\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\r\n}\r\n```\r\n\r\n**Proposed implementation:**\r\n\r\n```js\r\nfunction compose(...funcs) {\r\n  if (funcs.length === 0) {\r\n    return arg => arg;\r\n  }\r\n  if (funcs.length === 1) {\r\n    return funcs[0];\r\n  }\r\n  return funcs.reduce((a, b) => (value, ...rest) => a(b(value, ...rest), ...rest));\r\n}\r\n```\r\n\r\nAs of now, compose in Redux works the same way as a composition operator in Haskell, which applies `...rest` to only the right-most function. This is a bit of departure from Haskell, but in return it allows to reuse this pattern with state reducers, and in general with anything that accepts a context as a second argument.\r\n\r\nThis form is compatible with the current usage of compose (composing store enhancers), as enhancers accept only one argument (redux store):\r\n\r\n```js\r\nconst store = createStore(\r\n  reducer,\r\n  compose(\r\n    applyMiddleware(thunk),\r\n    DevTools.instrument()\r\n  )\r\n)\r\n```\r\n\r\n**Potential foot-gun** is that third-parties might abuse this pattern by requiring some context as a second argument, and different libraries might use a different type of context, rendering them mutually incompatible.\r\n\r\nAnother foot-gun is that composed functions might not be pure. If they mutate the context, things might randomly break, but you can already do that by just mutating the input value (for example mutating state inside the reducer or store object). Moderate levels of sanity are required to use this form the right way.\r\n\r\nProbably, the safest way is to introduce a separate `composeReducers` function, that does just that:\r\n\r\n```js\r\nconst reducer = composeReducers(\r\n  combineReducers({\r\n    router: routerReducer,\r\n    rulebook: rulebookReducer,\r\n  }),\r\n  characterReducer,\r\n  gameStateReducer,\r\n  relayReducer,\r\n  persistenceReducer,\r\n  initialStateReducer\r\n);\r\n```\r\n\r\nBut I think that a new form of `compose` will be more beneficial and will bring new usage patterns.\r\n\r\nI would like to hear some criticism.\r\n\r\n**EDIT**: I've updated the implementation to use functional style, as in the current `compose` implementation."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3075",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3075/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3075/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3075/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3075",
      "id": 345466854,
      "node_id": "MDU6SXNzdWUzNDU0NjY4NTQ=",
      "number": 3075,
      "title": "Docs: add Redux historical context page and FAQ info",
      "user": {
        "login": "markerikson",
        "id": 1128784,
        "node_id": "MDQ6VXNlcjExMjg3ODQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markerikson",
        "html_url": "https://github.com/markerikson",
        "followers_url": "https://api.github.com/users/markerikson/followers",
        "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
        "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
        "organizations_url": "https://api.github.com/users/markerikson/orgs",
        "repos_url": "https://api.github.com/users/markerikson/repos",
        "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markerikson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 1,
      "created_at": "2018-07-28T17:53:03Z",
      "updated_at": "2018-12-14T03:13:16Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "A lot of the questions and confusion around using and learning Redux seem to stem from a lack of understanding about why and how it was created in the first place.  Redux was explicitly created as \"an attempt to write a Flux library that does hot reloading\", and so most of its design decisions stem from that.\r\n\r\nI wrote a pair of blog posts that discuss a lot of the \"why\" behind Redux's original creation and common usage practices ([The Tao of Redux, Part 1: Implementation and Intent](http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/), and [The Tao of Redux, Part 2: Practice and Philosophy](http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/)).  While writing those, I did a lot of research into the early Redux issues and design discussions, and I recently pasted a copy of my research notes here: https://gist.github.com/markerikson/2971210292a9c65138eeb33ae7d560b0 .\r\n\r\nWe already have Redux docs page on \"Motivation\" and \"Prior Art\", but I think it would be beneficial if we had some kind of a \"Historical Context\" page (for lack of a better name) that summarized the info from my \"Tao of Redux\" posts and the discussions linked in that research.  It should try to explain the intent behind Redux's creation and design decisions, especially around its Flux library heritage.  \r\n\r\nSome of this information would also be useful in the \"Design Decisions\" FAQ page as well.  We could add some questions like \"Why are 'actions' called that?\", \"Why isn't redux-thunk included with the Redux core?\", etc."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3041",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3041/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3041/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3041/events",
      "html_url": "https://github.com/reduxjs/redux/pull/3041",
      "id": 335216176,
      "node_id": "MDExOlB1bGxSZXF1ZXN0MTk2OTcyMjE4",
      "number": 3041,
      "title": "Add comparison / alternatives libraries section in doc #3034",
      "user": {
        "login": "exced",
        "id": 16327179,
        "node_id": "MDQ6VXNlcjE2MzI3MTc5",
        "avatar_url": "https://avatars1.githubusercontent.com/u/16327179?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/exced",
        "html_url": "https://github.com/exced",
        "followers_url": "https://api.github.com/users/exced/followers",
        "following_url": "https://api.github.com/users/exced/following{/other_user}",
        "gists_url": "https://api.github.com/users/exced/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/exced/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/exced/subscriptions",
        "organizations_url": "https://api.github.com/users/exced/orgs",
        "repos_url": "https://api.github.com/users/exced/repos",
        "events_url": "https://api.github.com/users/exced/events{/privacy}",
        "received_events_url": "https://api.github.com/users/exced/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-06-24T22:07:40Z",
      "updated_at": "2019-02-19T21:59:09Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/reduxjs/redux/pulls/3041",
        "html_url": "https://github.com/reduxjs/redux/pull/3041",
        "diff_url": "https://github.com/reduxjs/redux/pull/3041.diff",
        "patch_url": "https://github.com/reduxjs/redux/pull/3041.patch"
      },
      "body": "Issue reference : #3034 \r\n\r\nI wrote a simple draft to talk about some available alternatives out there.\r\n\r\nAs these libraries solve the problem in different ways and there are already a lot of articles comparing all of them, I wanted to have something different. That is why I intentionally did not dig into implementation details. \r\n\r\nFeel free to add any changes, (or even remove everything) but I think it could help people feeling overwhelmed by all the solutions out there.\r\n\r\nThanks"
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/3034",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/3034/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/3034/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/3034/events",
      "html_url": "https://github.com/reduxjs/redux/issues/3034",
      "id": 333358439,
      "node_id": "MDU6SXNzdWUzMzMzNTg0Mzk=",
      "number": 3034,
      "title": "Add comparison / alternatives libraries section in doc",
      "user": {
        "login": "exced",
        "id": 16327179,
        "node_id": "MDQ6VXNlcjE2MzI3MTc5",
        "avatar_url": "https://avatars1.githubusercontent.com/u/16327179?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/exced",
        "html_url": "https://github.com/exced",
        "followers_url": "https://api.github.com/users/exced/followers",
        "following_url": "https://api.github.com/users/exced/following{/other_user}",
        "gists_url": "https://api.github.com/users/exced/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/exced/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/exced/subscriptions",
        "organizations_url": "https://api.github.com/users/exced/orgs",
        "repos_url": "https://api.github.com/users/exced/repos",
        "events_url": "https://api.github.com/users/exced/events{/privacy}",
        "received_events_url": "https://api.github.com/users/exced/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-06-18T17:07:06Z",
      "updated_at": "2018-06-18T18:23:45Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "It would be nice to have a section in doc about how Redux compare to other state management solutions (Mobx / Mobx-state-tree for instance). There are already many blogs / talks about this topic but there are not centralized.\r\n\r\nThis would help newcomers understand what are the possible alternatives and if Redux is (or not) more suitable for their team and their project."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/2979",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/2979/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/2979/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/2979/events",
      "html_url": "https://github.com/reduxjs/redux/issues/2979",
      "id": 320617654,
      "node_id": "MDU6SXNzdWUzMjA2MTc2NTQ=",
      "number": 2979,
      "title": "typings for combineReducers infers overly action type from reducer map",
      "user": {
        "login": "ohjames",
        "id": 97685,
        "node_id": "MDQ6VXNlcjk3Njg1",
        "avatar_url": "https://avatars3.githubusercontent.com/u/97685?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ohjames",
        "html_url": "https://github.com/ohjames",
        "followers_url": "https://api.github.com/users/ohjames/followers",
        "following_url": "https://api.github.com/users/ohjames/following{/other_user}",
        "gists_url": "https://api.github.com/users/ohjames/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ohjames/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ohjames/subscriptions",
        "organizations_url": "https://api.github.com/users/ohjames/orgs",
        "repos_url": "https://api.github.com/users/ohjames/repos",
        "events_url": "https://api.github.com/users/ohjames/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ohjames/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2018-05-06T18:47:59Z",
      "updated_at": "2019-07-29T01:01:26Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**  \r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nThe following minimal reproduction shows the reducer is incorrectly typed to accept `AnyAction`\r\n\r\n```typescript\r\ninterface A1 { type: 'A1' }\r\ninterface A2 { type: 'A2' }\r\ntype Action = A1 | A2\r\nconst reducerMap = {\r\n  s1: (s: number, a: Action) => 1,\r\n  s2: (s: number, a: Action) => 2,\r\n}\r\nconst reducer = combineReducers(reducerMap)\r\n// the reducer call works even though it should only accept actions A1 and A2.\r\nreducer({ s1: 0, s2: 0 }, { type: 'blah' })\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe action types should be inferred from the action. If the typings are changed to this it works:\r\n\r\n```typescript\r\ntype FunctionReturnType<T> = T extends (...args: any[]) => infer R ? R : never\r\n\r\ntype CombinedState<T extends object> = { [K in keyof T]: FunctionReturnType<T[K]> }\r\n\r\ntype ActionFromReducer<T extends object> = T[keyof T] extends (\r\n  state: any,\r\n  action: infer A,\r\n  ...args: any[]\r\n) => any\r\n  ? A\r\n  : never\r\n\r\ntype ReducerReturnValue<T extends object> = (\r\n  state: CombinedState<T>,\r\n  action: ActionFromReducer<T>,\r\n) => CombinedState<T>\r\n\r\nexport function combineReducers<T extends object>(reducers: T): ReducerReturnValue<T>\r\n```\r\n\r\nBut this relies on conditional types which were added in typescript `2.8`. \r\n\r\n**Which versions of Redux, and which browser and OS are affected by this issue? Did this work in previous versions of Redux?**\r\n\r\nRedux 4.0.0"
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/2933",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/2933/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/2933/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/2933/events",
      "html_url": "https://github.com/reduxjs/redux/issues/2933",
      "id": 314322497,
      "node_id": "MDU6SXNzdWUzMTQzMjI0OTc=",
      "number": 2933,
      "title": "Tutorial needs to focus, too scattered and difficult to get started",
      "user": {
        "login": "mkirklions",
        "id": 38376755,
        "node_id": "MDQ6VXNlcjM4Mzc2NzU1",
        "avatar_url": "https://avatars1.githubusercontent.com/u/38376755?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mkirklions",
        "html_url": "https://github.com/mkirklions",
        "followers_url": "https://api.github.com/users/mkirklions/followers",
        "following_url": "https://api.github.com/users/mkirklions/following{/other_user}",
        "gists_url": "https://api.github.com/users/mkirklions/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mkirklions/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mkirklions/subscriptions",
        "organizations_url": "https://api.github.com/users/mkirklions/orgs",
        "repos_url": "https://api.github.com/users/mkirklions/repos",
        "events_url": "https://api.github.com/users/mkirklions/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mkirklions/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 11,
      "created_at": "2018-04-14T11:41:43Z",
      "updated_at": "2019-04-07T00:50:51Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "I hope redux authors can take this as constructive criticism. \r\n\r\nI am using redux, thank you for that.\r\n\r\nI take issue with the tutorial. The number of steps and backtracking to run your first Redux application was unacceptable. The tutorials I found on Medium were significantly better at getting Redux started quick, and explaining the components needed in an action, reducer, etc...\r\n\r\nThe tutorial was written with the understanding that you had experience with Flux. The tutorial was far too long before you could run a program.\r\n\r\nPeople need to play to fully understand. By the time I was 'playing', the tutorial example never worked and I moved onto Medium for learning redux.\r\n\r\nI think the tutorial needs to be completely re-written. Redux in 20 minutes and redux with networking would both be very useful. \r\n\r\nI hope you can find value in this comment. I find the package great to solve my JS problems, but the tutorial needs improvement."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/2854",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/2854/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/2854/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/2854/events",
      "html_url": "https://github.com/reduxjs/redux/issues/2854",
      "id": 299969088,
      "node_id": "MDU6SXNzdWUyOTk5NjkwODg=",
      "number": 2854,
      "title": "FAQ Updates, Part 2: Electric Boogaloo",
      "user": {
        "login": "markerikson",
        "id": 1128784,
        "node_id": "MDQ6VXNlcjExMjg3ODQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markerikson",
        "html_url": "https://github.com/markerikson",
        "followers_url": "https://api.github.com/users/markerikson/followers",
        "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
        "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
        "organizations_url": "https://api.github.com/users/markerikson/orgs",
        "repos_url": "https://api.github.com/users/markerikson/repos",
        "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markerikson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 9,
      "created_at": "2018-02-24T20:12:34Z",
      "updated_at": "2018-08-11T03:07:17Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "We were able to add a lot of FAQ updates over in #1785 , but there's still some more updates I'd like added.  Here's the current list of items I'd like in there:\r\n\r\n\r\n## Waiting to be Added\r\n\r\n\r\n### New topics\r\n\r\n\r\n#### General\r\n\r\n- When should I learn Redux?\r\n  - https://twitter.com/dan_abramov/status/739961787295117312\r\n  - https://twitter.com/dan_abramov/status/739962098030137344\r\n  - https://github.com/markerikson/react-redux-links/blob/master/basic-concepts.md\r\n- What are pros and cons of using Redux?\r\n  - https://github.com/reactjs/redux/issues/1342#issuecomment-183401969\r\n- How does Redux compare to [Backbone, Angular, MobX]?\r\n  - Redux vs a global variable\r\n    - https://news.ycombinator.com/item?id=13334978 \r\n- How is Redux different from React's context API?  Does context replace Redux?\r\n  - https://daveceddia.com/context-api-vs-redux/\r\n  - https://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/\r\n\r\n#### Code Structure\r\n\r\n- Reusable / encapsulated logic/modules?\r\n  - https://github.com/markerikson/redux-ecosystem-links/blob/master/component-state.md\r\n  - https://github.com/markerikson/react-redux-links/blob/master/redux-techniques.md#encapsulation-and-reusability\r\n  - http://randycoulman.com/blog/\r\n  - https://github.com/slorber/scalable-frontend-with-elm-or-redux\r\n  - http://www.webpackbin.com/VkHniHP6b\r\n- Where should websockets and other persistent connections live?\r\n    - In middleware.  See existing examples at https://github.com/markerikson/redux-ecosystem-links/blob/master/middleware-sockets-adapters.md\r\n\r\n#### Actions\r\n\r\n- Should I use thunks, sagas, or something else?\r\n  - https://blog.isquaredsoftware.com/presentations/workshops/redux-fundamentals/store-api.html#/6\r\n  - https://decembersoft.com/posts/what-is-the-right-way-to-do-asynchronous-operations-in-redux/\r\n  - https://www.reddit.com/r/reactjs/comments/8vglo0/react_developer_map_by_adamgolab/e1nr597/\r\n\r\n#### Performance\r\n\r\n- Pagination/caching?\r\n  - http://stackoverflow.com/questions/33940015/how-to-choose-the-redux-state-shape-for-an-app-with-list-detail-views-and-pagina\r\n  - https://github.com/facebook/relay/issues/720#issuecomment-174050321\r\n  - https://twitter.com/acemarke/status/804071531844423683\r\n  - https://medium.com/@dcousineau/advanced-redux-entity-normalization-f5f1fe2aefc5\r\n  - Related to existing \"state tree size\" question\r\n\r\n#### Design Decisions\r\n- Why does Redux separate out actions and updates?  Why not just update state directly?\r\n  - https://stackoverflow.com/questions/43640464/why-we-decouple-actions-and-reducers-in-flux-redux-architecture\r\n  - https://medium.com/@mark.erikson/ill-repeat-a-comment-i-ve-made-several-times-now-b4ead0b57a95\r\n  - https://news.ycombinator.com/item?id=14550588\r\n\r\n#### React-Redux\r\n\r\n- Why use React-Redux?\r\n  - https://www.reddit.com/r/javascript/comments/6hperk/i_use_react_and_redux_but_never_reactredux_what/dj0fywb/\r\n\r\n#### Other\r\n\r\n- Fit these diagrams in somewhere? https://github.com/reactjs/redux/issues/653\r\n- \"FAQ-worthy\" mentions:\r\n  - https://github.com/reactjs/redux/issues/1751\r\n  - https://github.com/reactjs/redux/issues/1628\r\n  - https://github.com/reactjs/redux/issues/1676\r\n  - https://twitter.com/dan_abramov/status/732543424356864001\r\n- Boilerplate/verbosity:\r\n  - https://twitter.com/dan_abramov/status/813860965477392385\r\n\r\n\r\n### Updates to Existing Questions\r\n\r\n- When should I use Redux?\r\n  -  [x] https://dev.to/dan_abramov/comment/1n2k\r\n- Where should I put \"business logic\" ?\r\n  -  [x] https://twitter.com/FwardPhoenix/status/952971237004926977\r\n  - [x]  https://github.com/reactjs/redux/issues/2796\r\n\r\nIt's not an FAQ item, but I'll leave a note for myself here rather than filing a new issue.  The \"Beyond combineReducers\" page should have a mention of \"double-nesting state\", as in `state.posts.posts`, usually due to initial state defining a key _and_ the slice reducer being given a key. .  Definitely a common mistake."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/2750",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/2750/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/2750/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/2750/events",
      "html_url": "https://github.com/reduxjs/redux/issues/2750",
      "id": 279784928,
      "node_id": "MDU6SXNzdWUyNzk3ODQ5Mjg=",
      "number": 2750,
      "title": "Allow combineReducers reducers to consult global state",
      "user": {
        "login": "entropitor",
        "id": 896093,
        "node_id": "MDQ6VXNlcjg5NjA5Mw==",
        "avatar_url": "https://avatars3.githubusercontent.com/u/896093?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/entropitor",
        "html_url": "https://github.com/entropitor",
        "followers_url": "https://api.github.com/users/entropitor/followers",
        "following_url": "https://api.github.com/users/entropitor/following{/other_user}",
        "gists_url": "https://api.github.com/users/entropitor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/entropitor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/entropitor/subscriptions",
        "organizations_url": "https://api.github.com/users/entropitor/orgs",
        "repos_url": "https://api.github.com/users/entropitor/repos",
        "events_url": "https://api.github.com/users/entropitor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/entropitor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-12-06T15:02:51Z",
      "updated_at": "2018-05-29T19:27:14Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "**Do you want to request a *feature* or report a *bug*?**  \r\nfeature\r\n\r\n**What is the current behavior?**\r\nThe subreducers of combineReducers are real reducers, they only get `state` and `action`, it would be nice if we could pass an extra argument to these reducers through an option, e.g. to inject the full state back into the subreducers if a reducer might need some information of another reducer without ever needing to change it. \r\n\r\nI know we can write this ourselves, however, we wouldn't get all the warnings and/or optimizations of combineReducers then.\r\n\r\ne.g.\r\n```js\r\nfunction bar (barState = 4, action) {\r\n  if (action.type === 'ODD') return 3\r\n  else return 4\r\n}\r\nfunction foo (fooState = 0, action, fullState) {\r\n  return fooState + fullState.bar\r\n}\r\ncombineReducers({\r\n  foo,\r\n  bar,\r\n}, {\r\n  extraArg: state => state,\r\n})\r\n\r\n\r\n"
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/2626",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/2626/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/2626/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/2626/events",
      "html_url": "https://github.com/reduxjs/redux/issues/2626",
      "id": 260823018,
      "node_id": "MDU6SXNzdWUyNjA4MjMwMTg=",
      "number": 2626,
      "title": "Write the \"Next Steps\" docs page",
      "user": {
        "login": "markerikson",
        "id": 1128784,
        "node_id": "MDQ6VXNlcjExMjg3ODQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markerikson",
        "html_url": "https://github.com/markerikson",
        "followers_url": "https://api.github.com/users/markerikson/followers",
        "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
        "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
        "organizations_url": "https://api.github.com/users/markerikson/orgs",
        "repos_url": "https://api.github.com/users/markerikson/repos",
        "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markerikson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 13,
      "created_at": "2017-09-27T01:59:04Z",
      "updated_at": "2018-05-12T19:51:26Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "It was just pointed out to me that the Redux docs have a TOC entry labeled \"Next Steps\", but that page has never actually been written, so the link doesn't work.  This would be an excellent topic to add.\r\n\r\nThis HN comment subthread describes some of the topics that would be helpful to have in a \"Next Steps\" doc:https://news.ycombinator.com/item?id=15343001 , and this tweet is relevant as well: https://twitter.com/Will_Faurot/status/936792737680048128 .\r\n\r\nIn general, we ought to:\r\n\r\n- Provide suggestions for things to do after going through the tutorial sections\r\n- Give advice on how to handle situations that a user may be dealing with trying to build their first \"real\" app\r\n- Cover that gap between writing a TodoMVC app and building something \"real-world\""
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/2591",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/2591/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/2591/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/2591/events",
      "html_url": "https://github.com/reduxjs/redux/issues/2591",
      "id": 253218192,
      "node_id": "MDU6SXNzdWUyNTMyMTgxOTI=",
      "number": 2591,
      "title": "Improve docs related to UI layers like React-Redux",
      "user": {
        "login": "markerikson",
        "id": 1128784,
        "node_id": "MDQ6VXNlcjExMjg3ODQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markerikson",
        "html_url": "https://github.com/markerikson",
        "followers_url": "https://api.github.com/users/markerikson/followers",
        "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
        "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
        "organizations_url": "https://api.github.com/users/markerikson/orgs",
        "repos_url": "https://api.github.com/users/markerikson/repos",
        "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markerikson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 5,
      "created_at": "2017-08-28T03:32:26Z",
      "updated_at": "2018-05-12T19:51:24Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "We've got a section on use with React, but it feels a bit weak to me at the moment.  There's several aspects of `connect()` that aren't covered in there, like the object shorthand form of `mapDispatch`, using factory functions, and more.\r\n\r\nThe React-Redux API docs are also kept separate, and live over in the React-Redux repo itself, at https://github.com/reactjs/react-redux/blob/master/docs/api.md .  Now, I do fully agree that Redux is UI-layer agnostic, but given that React-Redux is the one \"official\" set of bindings that we maintain, I'd like to add more detail on how to actually use those correctly into our main docs.\r\n\r\nIn addition, it would be great if we could add some kind of \"Use with other UI libraries\" section that gives some details on how to use Redux with Angular, Ember, Vue, Backbone, or jQuery."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/2590",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/2590/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/2590/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/2590/events",
      "html_url": "https://github.com/reduxjs/redux/issues/2590",
      "id": 253216588,
      "node_id": "MDU6SXNzdWUyNTMyMTY1ODg=",
      "number": 2590,
      "title": "General docs review, consideration, and improvements",
      "user": {
        "login": "markerikson",
        "id": 1128784,
        "node_id": "MDQ6VXNlcjExMjg3ODQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markerikson",
        "html_url": "https://github.com/markerikson",
        "followers_url": "https://api.github.com/users/markerikson/followers",
        "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
        "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
        "organizations_url": "https://api.github.com/users/markerikson/orgs",
        "repos_url": "https://api.github.com/users/markerikson/repos",
        "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markerikson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 33,
      "created_at": "2017-08-28T03:16:38Z",
      "updated_at": "2018-12-20T16:41:58Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "The Redux docs are great, and I'm not just saying that because I wrote a couple large sections :)  However, much of the content was written right at the beginning, and while there's always been tweaks and edits from people over time, it might be worth stepping back and reviewing how they work as a whole.\r\n\r\nWhen Dan was writing the docs initially, [he said](https://twitter.com/dan_abramov/status/622568094939090944):\r\n\r\n> So hard to write the new docs. Many different audiences to cater to.  \r\n> Should make sense to: Flux beginners, FP people, FP people who don't get Flux, Flux people who don't get FP, normal JS people too  \r\n> Flux people: “is this proper Flux?” FP people: “is this that weird thing called Flux?” Normal people: “why not Backbone”  \r\n\r\n2+ years later, the situation is somewhat different.  There really are no more \"Flux beginners\", at least in terms of people who have just gotten started with a \"standard\" Flux library.  Instead, people are coming straight to Redux, including people with little actual React experience.  There's also probably less Backbone background as well, and overall the \"Flux Architecture\" is pretty well known at this point.\r\n\r\nAnother consideration is learning approach.  The current tutorial sections take a very \"from first principles\" approach.  For example, the \"Middleware\" page walks through 6 different ways to implement middleware functionality in various hack-ish ways, iterating up to the actual middleware signature.  That's great for some people, but maybe not for hours.  Are there other ways we could present things that might help some people?  Would a \"Quick Start\" section or something like that be useful?\r\n\r\nI'm _not_ proposing that we throw all the docs out and start over, but I think it's worth trying to review and rethink what we want to say and how we want to say it, similar to how Dan reworked the React docs recently-ish.\r\n\r\nI don't have any specific suggestions right this minute, but I want to solicit feedback and suggestions for any topics that we don't cover, or ways to improve what we already cover."
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/2589",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/2589/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/2589/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/2589/events",
      "html_url": "https://github.com/reduxjs/redux/issues/2589",
      "id": 253214328,
      "node_id": "MDU6SXNzdWUyNTMyMTQzMjg=",
      "number": 2589,
      "title": "Add \"Further Information\" resource links to all doc pages",
      "user": {
        "login": "markerikson",
        "id": 1128784,
        "node_id": "MDQ6VXNlcjExMjg3ODQ=",
        "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/markerikson",
        "html_url": "https://github.com/markerikson",
        "followers_url": "https://api.github.com/users/markerikson/followers",
        "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
        "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
        "organizations_url": "https://api.github.com/users/markerikson/orgs",
        "repos_url": "https://api.github.com/users/markerikson/repos",
        "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/markerikson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 13,
      "created_at": "2017-08-28T02:56:45Z",
      "updated_at": "2018-05-12T19:51:24Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "As seen in my [React/Redux links list](https://github.com/markerikson/react-redux-links), there's _tons_ of useful and relevant info about all things Redux online.  The docs themselves can only cover so much actual info, and most of it is focused on the basics.  \r\n\r\nI try to end each of my blog posts with a \"Further Information\" section that includes links mentioned earlier in the page, and also has additional links to relevant articles and resources.  I'd love it if we could add this type of info to each of our existing docs pages.\r\n\r\nAs a starting point: the \"Structuring Reducers\" docs section has a page called \"Prerequisite Concepts\" that links to some selected articles on topics like immutable data and normalization.  However, the other pages in that section don't specifically reference those links.  A few of those links could be added to the bottom of each page in the \"Structuring Reducers\" section, as appropriate.\r\n\r\nFor reference, a few of my posts:\r\n\r\n- [Idiomatic Redux: The Tao of Redux, Part 1 - Implementation and Intent](http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/)\r\n- [Practical Redux, Part 6: Connected Lists, Forms, and Performance](http://blog.isquaredsoftware.com/2017/01/practical-redux-part-6-connected-lists-forms-and-performance/)\r\n- [Blogged Answers: Webpack HMR vs React-Hot-Loader](http://blog.isquaredsoftware.com/2017/08/blogged-answers-webpack-hmr-vs-rhl/)"
    },
    {
      "url": "https://api.github.com/repos/reduxjs/redux/issues/2520",
      "repository_url": "https://api.github.com/repos/reduxjs/redux",
      "labels_url": "https://api.github.com/repos/reduxjs/redux/issues/2520/labels{/name}",
      "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/2520/comments",
      "events_url": "https://api.github.com/repos/reduxjs/redux/issues/2520/events",
      "html_url": "https://github.com/reduxjs/redux/issues/2520",
      "id": 243394642,
      "node_id": "MDU6SXNzdWUyNDMzOTQ2NDI=",
      "number": 2520,
      "title": "Documentation suggestion/discussion: Reusing Reducer Logic",
      "user": {
        "login": "funwithtriangles",
        "id": 1876324,
        "node_id": "MDQ6VXNlcjE4NzYzMjQ=",
        "avatar_url": "https://avatars3.githubusercontent.com/u/1876324?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/funwithtriangles",
        "html_url": "https://github.com/funwithtriangles",
        "followers_url": "https://api.github.com/users/funwithtriangles/followers",
        "following_url": "https://api.github.com/users/funwithtriangles/following{/other_user}",
        "gists_url": "https://api.github.com/users/funwithtriangles/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/funwithtriangles/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/funwithtriangles/subscriptions",
        "organizations_url": "https://api.github.com/users/funwithtriangles/orgs",
        "repos_url": "https://api.github.com/users/funwithtriangles/repos",
        "events_url": "https://api.github.com/users/funwithtriangles/events{/privacy}",
        "received_events_url": "https://api.github.com/users/funwithtriangles/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 225483610,
          "node_id": "MDU6TGFiZWwyMjU0ODM2MTA=",
          "url": "https://api.github.com/repos/reduxjs/redux/labels/docs",
          "name": "docs",
          "color": "5319e7",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 2,
      "created_at": "2017-07-17T13:25:23Z",
      "updated_at": "2018-05-17T02:47:52Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "I've been thinking about a pattern for reusing reducer logic to that is not suggested here:\r\nhttp://redux.js.org/docs/recipes/reducers/ReusingReducerLogic.html\r\n\r\nI'm wondering about the advantages and disadvantages of it, and if it might be worth mentioning in the documentation on that page.\r\n\r\nInstead of \"creating\" different instances of the same reducer, why not just have a single reducer that has its own slices for each part of your app? Following on from the counter example, the state would look like this:\r\n\r\n```javascript\r\n{\r\n   counters: {\r\n     counterA: 0,\r\n     counterB: 1,\r\n     counterC: 0\r\n   }\r\n   ...other state slices here\r\n}\r\n```\r\n\r\nAnd the reducer would look like this:\r\n\r\n```javascript\r\nfunction counterReducer(state, action) => {\r\n  const { name } = action\r\n\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n        return {\r\n           ...state,\r\n           state[name]: state + 1;\r\n         }\r\n    case 'DECREMENT':\r\n        return {\r\n           ...state,\r\n           state[name]: state - 1;\r\n         }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n```\r\n\r\nDoes this not achieve the same results but with less complexity? Are there some serious pitfalls that I have not considered? This approach would also allow you to write a single selector function to get the counter value, as you can be more sure about the shape of your state across the app:\r\n\r\n```javascript\r\nconst getCounterValue = (state, name) => state.counters[name]\r\n```\r\n\r\nCC @markerikson @timse (contributors to the page in docs)"
    }
  ]
}